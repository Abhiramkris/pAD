#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <HTTPClient.h>

// WiFi Credentials
const char* ssid = "asdf";
const char* password = "";

// Server URLs
const char* checkURL = "https://pad-ew3v.onrender.com/check";
const char* displayURL = "https://pad-ew3v.onrender.com/display";
const char* refundURL = "https://pad-ew3v.onrender.com/refund";
const char* updatePaymentStatusURL = "https://pad-ew3v.onrender.com/update-payment-status";
const char* authCode = "your_secret_auth_code";
const char* serverIP = "https://pad-ew3v.onrender.com";  // or any other server URL you want

// Motor and IR sensor configuration for L298N
const int motorPin1 = 23;  // Motor direction pin 1 (IN1)
const int motorPin2 = 22;  // Motor direction pin 2 (IN2)
const int motorEnablePin = 21;  // Motor enable pin (EN)
const int irSensorPin = 15;  // Adjust the pin number based on your wiring

unsigned long motorStartTime = 0;
const unsigned long motorTimeout = 10000;  // 10 seconds timeout
bool motorStarted = false;
bool irInterruptDetected = false;

// OLED Display Configuration
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// LED Pin
const int ledPin = 2;

// Pad Count Variable
int padCount = 0; // Variable to track pad count

// Function Declarations
void fetchCheckStatus();
void fetchAndDisplayData();
void sendSystemError();
void startMotor();
void stopMotor();
void updatePaymentStatus();
void startRefundProcess(const String& paymentId, const String& reason);
void updatePadCount();

// Sensor Interrupt
void IRAM_ATTR sensorInterrupt() {
  irInterruptDetected = true;  // Set the flag when the IR sensor is triggered
  padCount++; // Increment pad count on IR sensor interruption
  Serial.println("IR sensor triggered! Pad dispensed.");
}

void startMotor() {
  if (!motorStarted) {  // Ensure motor only starts if not already running
    motorStarted = true;
    motorStartTime = millis();  // Start the motor and record the time
    digitalWrite(motorPin1, HIGH);  // Set direction pin 1
    digitalWrite(motorPin2, LOW);   // Set direction pin 2
    digitalWrite(motorEnablePin, HIGH);  // Enable motor
    Serial.println("Motor started.");
  }
}

void stopMotor() {
  digitalWrite(motorEnablePin, LOW);  // Disable motor
  motorStarted = false;
  Serial.println("Motor stopped.");
  updatePaymentStatus();  // Update payment status when the motor stops
}

void setup() {
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  pinMode(motorEnablePin, OUTPUT);
  pinMode(irSensorPin, INPUT_PULLUP);

  // Attach the interrupt to the IR sensor
  attachInterrupt(digitalPinToInterrupt(irSensorPin), sensorInterrupt, FALLING);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3D)) {
    Serial.println("SSD1306 allocation failed!");
    for (;;);
  }

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Initializing...");
  display.display();

  WiFi.begin(ssid, password);
  display.println("Connecting to WiFi...");
  display.display();
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected!");
  display.println("WiFi Connected!");
  display.display();
}

void loop() {
  // If motor is running, check for timeout and IR interrupt
  if (motorStarted) {
    unsigned long currentTime = millis();
    if (currentTime - motorStartTime >= motorTimeout && !irInterruptDetected) {
      // If no IR interrupt after 10 seconds, stop motor and initiate refund
      Serial.println("No IR interrupt detected within 10 seconds. Stopping motor and initiating refund.");
      stopMotor();  // Stop motor
      startRefundProcess("some_payment_id", "Payment timeout, no IR sensor interrupt.");  // Start refund process
    }
  }

  // If IR sensor is triggered, stop motor and reset interrupt flag
  if (irInterruptDetected) {
    Serial.println("IR sensor triggered. Stopping motor.");
    stopMotor();  // Stop motor
    irInterruptDetected = false;  // Reset interrupt flag
    updatePaymentStatus();  // Update payment status
  }

  // Fetch and display data
  if (WiFi.status() == WL_CONNECTED) {
    fetchCheckStatus();
    fetchAndDisplayData();
  } else {
    Serial.println("WiFi not connected!");
  }

  delay(5000);  // Poll every 5 seconds
}

void fetchCheckStatus() {
  HTTPClient http;
  String fullURL = String(checkURL) + "?authCode=" + authCode;
  http.begin(fullURL);

  int httpResponseCode = http.GET();
  if (httpResponseCode == 200) {
    String payload = http.getString();
    Serial.println("System Status from /check: " + payload);
    if (payload.indexOf("\"systemStatus\":\"active\"") > -1) {
      digitalWrite(ledPin, HIGH);
    } else {
      digitalWrite(ledPin, LOW);
    }
  } else {
    Serial.println("Error fetching /check status: " + String(httpResponseCode));
    digitalWrite(ledPin, LOW);
  }

  http.end();
}

void fetchAndDisplayData() {
  HTTPClient http;
  String fullURL = String(displayURL) + "?authCode=" + authCode;
  http.begin(fullURL);

  int httpResponseCode = http.GET();
  if (httpResponseCode == 200) {
    String payload = http.getString();
    Serial.println("Display Data from /display: " + payload);

    // Parse the response to check for "dispensing"
    if (payload.indexOf("\"dispensing\":false") > -1) {
      if (motorStarted) {
        Serial.println("Dispensing is false. Stopping motor...");
        stopMotor();
      }
    } else if (payload.indexOf("\"dispensing\":true") > -1) {
      if (!motorStarted) {
        Serial.println("Dispensing is true. Starting motor...");
        startMotor();
      }
    }

    // Display the data on the OLED screen
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println(payload);
    display.display();
  } else {
    Serial.println("Error fetching /display: " + String(httpResponseCode));
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("Error fetching data!");
    display.display();
  }

  http.end();
}

void startRefundProcess(const String& paymentId, const String& reason) {
  Serial.println("Starting refund process...");

  HTTPClient http;
  http.begin(refundURL);
  http.addHeader("Content-Type", "application/json");

  // Prepare JSON payload
  String postData = "{\"paymentId\":\"" + paymentId + "\", \"reason\":\"" + reason + "\"}";

  int httpResponseCode = http.POST(postData);

  if (httpResponseCode == 200) {
    Serial.println("Refund process initiated successfully.");
    String response = http.getString();
    Serial.println("Server response: " + response);
    
    // Update payment status to 'ready' after refund is processed
    updatePaymentStatus();
  } else {
    Serial.println("Refund request failed!");
    String response = http.getString();
    Serial.println("Server response: " + response);
  }

  http.end();
}


void updatePaymentStatus() {
  HTTPClient http;
  String url = updatePaymentStatusURL;  // Replace with your server's IP or domain
  http.begin(url);
  http.addHeader("Content-Type", "application/json");

  // Make sure the authCode matches the one set on the server
  String jsonPayload = "{\"paymentStatus\":\"ready\", \"authCode\":\"" + String(authCode) + "\"}";

  // Send the POST request
  int httpResponseCode = http.POST(jsonPayload);

  if (httpResponseCode == 200) {
    Serial.println("Payment status updated to ready successfully.");
  } else {
    Serial.println("Failed to update payment status. HTTP response code: " + String(httpResponseCode));
    String response = http.getString();
    Serial.println("Server response: " + response);
  }

  http.end();
}

void sendSystemError() {
  HTTPClient http;
  String fullURL = String(serverIP) + "/system-error";
  http.begin(fullURL);

  String postData = "{\"reason\":\"IR interrupt not detected\"}";

  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST(postData);
  if (httpResponseCode == 200) {
    Serial.println("System error reported to server.");
  } else {
    Serial.println("Failed to report system error to server.");
  }

  http.end();
}



db connection 
admin login 
admin logs 
admin payments 
admin switch on off reset the state 


#esp32 
email function 
display function 
log function 
payment function 
refund fuinction 
start motor function 
ir trigger function 
hall effect sensor funtion 

