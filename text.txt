#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <HTTPClient.h>

// WiFi Credentials
const char* ssid = "your_wifi_ssid";
const char* password = "your_wifi_password";

// Server URL and Auth Code
const char* checkURL = "http://your-server-url.com/check";
const char* displayURL = "http://your-server-url.com/display";
const char* authCode = "your_secret_auth_code";

// LED Pin
const int ledPin = 2;                         // GPIO2 (onboard LED)
const int motorPin = 12;                      // Example motor control pin
const int irSensorPin = 14;                   // Example pin for the IR sensor
unsigned long motorStartTime = 0;             // Variable to store motor start time
const unsigned long timeoutDuration = 10000;  // 10 seconds timeout (in milliseconds)
bool motorStarted = false;
bool irInterruptDetected = false;  // Flag to track IR interrupt


// OLED Display Configuration
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

void IRAM_ATTR sensorInterrupt() {
  // This function is called when the IR sensor detects a pad has been dispensed
  Serial.println("IR sensor triggered! Pad dispensed.");

  // Send notification to Node.js server to reduce pad count
  HTTPClient http;
  String fullURL = String(serverIP) + "/sensor-interrupt";
  http.begin(fullURL);
  http.addHeader("Content-Type", "application/json");

  String jsonPayload = "{\"sensorTriggered\": true}";
  int httpResponseCode = http.POST(jsonPayload);

  if (httpResponseCode == 200) {
    String payload = http.getString();
    Serial.println("Server response: " + payload);  // Log server response
  } else {
    Serial.println("Error sending sensor data: " + String(httpResponseCode));
  }

  http.end();
}

void startMotor() {
  // Start the motor (implement your motor control logic here)
  digitalWrite(motorPin, HIGH);  // Motor on
  delay(5000);                   // Motor runs for 5 seconds (adjust as necessary)
  digitalWrite(motorPin, LOW);   // Motor off
}


void setup() {
  // Initialize Serial Monitor, LED Pin, and OLED Display
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  Serial.begin(115200);
  pinMode(motorPin, OUTPUT);
  pinMode(irSensorPin, INPUT_PULLUP);  // IR sensor pin setup

  // Attach interrupt to the IR sensor pin
  attachInterrupt(digitalPinToInterrupt(irSensorPin), sensorInterrupt, FALLING);  // Trigger on falling edge (adjust as necessary)


  if (!display.begin(SSD1306_I2C_ADDRESS, 0x3C)) {
    Serial.println("SSD1306 allocation failed!");
    for (;;)
      ;
  }


  // Clear and display initial message
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Initializing...");
  display.display();

  // Connect to WiFi
  WiFi.begin(ssid, password);
  display.println("Connecting to WiFi...");
  display.display();
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected!");
  display.println("WiFi Connected!");
  display.display();
}

void loop() {
  if (WiFi.status() == WL_CONNECTED) {
    // Check System Status and log to Serial Monitor
    fetchCheckStatus();

    // Fetch and Display `/display` Data
    fetchAndDisplayData();
  } else {
    Serial.println("WiFi not connected!");
  }
  HTTPClient http;
  String fullURL = String(serverIP) + "/check-motor?authCode=" + authCode;
  http.begin(fullURL);

  int httpResponseCode = http.GET();
  if (httpResponseCode == 200) {
    String payload = http.getString();
    Serial.println("Motor Status: " + payload);  // Log to Serial Monitor

    // Check if the response is to start the motor
    if (payload.indexOf("\"motor\":\"start\"") > -1) {
      Serial.println("Activating motor...");
      startMotor();  // Start the motor
    }
  } else {
    Serial.println("Error fetching motor status: " + String(httpResponseCode));
  }

  http.end();
}
else {
  Serial.println("WiFi not connected!");
}

delay(5000);  // Poll every 5 seconds
if (motorStarted) {
  // Check if 10 seconds have passed since the motor was started
  if (millis() - motorStartTime >= timeoutDuration) {
    if (!irInterruptDetected) {
      // If IR interrupt was not detected, send system error and refund
      sendSystemError();
    }
    motorStarted = false;  // Reset motor start status
  }
}
}

void fetchCheckStatus() {
  HTTPClient http;
  String fullURL = String(checkURL) + "?authCode=" + authCode;
  http.begin(fullURL);

  int httpResponseCode = http.GET();
  if (httpResponseCode == 200) {
    String payload = http.getString();
    Serial.println("System Status from /check: " + payload);  // Log to Serial Monitor

    // Check if system is active
    if (payload.indexOf("\"systemStatus\":\"active\"") > -1) {
      digitalWrite(ledPin, HIGH);  // Light up LED if system is active
    } else {
      digitalWrite(ledPin, LOW);  // Turn off LED if system is inactive
    }
  } else if (httpResponseCode == 401) {
    Serial.println("Unauthorized access to /check: Check your auth code.");
    digitalWrite(ledPin, LOW);  // Turn off LED for unauthorized requests
  } else {
    Serial.println("Error fetching /check status: " + String(httpResponseCode));
    digitalWrite(ledPin, LOW);
  }

  http.end();
}

void irInterruptHandler() {
  irInterruptDetected = true;  // Set flag to true if IR interrupt occurs
}

void sendSystemError() {
  HTTPClient http;
  String fullURL = String(serverIP) + "/system-error";  // Server URL to handle system error
  http.begin(fullURL);
  
  // Add your payment ID and reason to the request body
  String postData = "{\"paymentId\":\"" + String(systemState.currentPaymentId) + "\",\"reason\":\"IR interrupt not detected\"}";

  http.addHeader("Content-Type", "application/json");
  
  int httpResponseCode = http.POST(postData);
  
  if (httpResponseCode == 200) {
    Serial.println("System error reported to server and refund initiated.");
  } else {
    Serial.println("Failed to report system error to server.");
  }

  http.end();
}

void fetchAndDisplayData() {
  HTTPClient http;
  String fullURL = String(displayURL) + "?authCode=" + authCode;
  http.begin(fullURL);

  int httpResponseCode = http.GET();
  if (httpResponseCode == 200) {
    String payload = http.getString();
    Serial.println("Display Data from /display: " + payload);  // Log to Serial Monitor

    // Parse and Display Data (Simple JSON parsing for demonstration)
    display.clearDisplay();
    display.setCursor(0, 0);

    if (payload.indexOf("\"wifi\"") > -1) {
      display.println("WiFi: Connecting...");
    }
    if (payload.indexOf("\"server\"") > -1) {
      display.println("Server: Connecting...");
    }
    if (payload.indexOf("\"payment\"") > -1) {
      display.println("Payment: Success!");
    }
    if (payload.indexOf("\"transaction\"") > -1) {
      display.println("DB: Transaction OK");
    }
    if (payload.indexOf("\"attempt\"") > -1) {
      display.println("Attempt: 1/2/3");
    }
    if (payload.indexOf("\"complete\"") > -1) {
      display.println("Complete: Thank You!");
    }

    display.display();
  } else if (httpResponseCode == 401) {
    Serial.println("Unauthorized access to /display.");
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("Unauthorized");
    display.display();
  } else {
    Serial.println("Error fetching /display: " + String(httpResponseCode));
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("Error fetching data!");
    display.display();
  }

  http.end();
}
