#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include "SPIFFS.h"  // Include SPIFFS for persistent storage

// WiFi Credentials
const char* ssid = "asdff";
const char* password = "";

// Server URLs
const char* checkURL = "https://pad-ew3v.onrender.com/check";
const char* displayURL = "https://pad-ew3v.onrender.com/display";
const char* refundURL = "https://pad-ew3v.onrender.com/refund";
const char* updatePaymentStatusURL = "https://pad-ew3v.onrender.com/update-payment-status";
const char* currentPaymentRoute = "https://pad-ew3v.onrender.com/currentpaymentid";
const char* authCode = "your_secret_auth_code";
const char* serverIP = "https://pad-ew3v.onrender.com";

// Motor and IR sensor configuration
const int motorPin1 = 23;      // Motor direction pin 1 (IN1)
const int motorPin2 = 18;      // Motor direction pin 2 (IN2)
const int motorEnablePin = 19; // Motor enable pin (ENA)
const int irSensorPin = 13;    // IR sensor pin
const int irSensorEnablePin = 14; // IR sensor enable pin

// LED Pins
const int redLedPin = 25;      // Red LED for system offline/error
const int blueLedPin = 26;     // Blue LED for dispensing
const int greenLedPin = 27;    // Green LED for IR sensor trigger

// Timing variables for LED control
unsigned long blueLedBlinkStartTime = 0;
unsigned long greenLedTriggerTime = 0;
const unsigned long blueLedBlinkInterval = 500;  // Blink every 500ms
const unsigned long greenLedDuration = 6000;     // Green LED stays on/blinks for 6 seconds

// Timing and state variables for motor control
unsigned long motorStartTime = 0;
const unsigned long motorTimeout = 50000;  // Motor timeout in milliseconds
bool motorStarted = false;
volatile bool irInterruptDetected = false;

// Flag to indicate that a payment status update is pending
bool pendingPaymentUpdate = false;

// Debug variables
unsigned long lastDebugPrintTime = 0;
const unsigned long debugPrintInterval = 1000;  // Print debug info every 1 second

// OLED Display Configuration
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Function Declarations
void fetchCheckStatus();
void fetchAndDisplayData();
void sendSystemError();
void startMotor();
void stopMotor();
void updatePaymentStatus();
void processPendingPaymentUpdate();
void startRefundProcess(const String& paymentId, const String& reason);
String getCurrentPaymentId();
void setDispensingStatus(bool status);
void manageLEDs();

// IR Sensor Interrupt ISR (for pad dispensing)
void IRAM_ATTR irSensorISR() {
  irInterruptDetected = true;
}

void startMotor() {
  if (!motorStarted) {
    motorStarted = true;
    motorStartTime = millis();
    
    // First rotate in reverse briefly to initialize
    digitalWrite(motorPin1, LOW);
    digitalWrite(motorPin2, HIGH);
    digitalWrite(motorEnablePin, HIGH);
    Serial.println("Motor initializing in reverse...");
    
    // Run in reverse for a short time
    delay(500);  // 500ms in reverse
    
    // Then switch to forward direction
    digitalWrite(motorPin1, HIGH);
    digitalWrite(motorPin2, LOW);
    Serial.println("Motor now running forward.");

    // Reset flags when motor starts
    irInterruptDetected = false;
  }
}

void stopMotor() {
  digitalWrite(motorEnablePin, LOW);  // Disable motor
  motorStarted = false;
  Serial.println("Motor stopped.");
  updatePaymentStatus();
}

void setup() {
  Serial.begin(115200);
  delay(1000);  // Give serial port time to initialize
  Serial.println("\n\n========== SYSTEM STARTING ==========");

  // Initialize SPIFFS for persistent storage
  if (!SPIFFS.begin(true)) {
    Serial.println("SPIFFS Mount Failed");
    return;
  }

  // Set pin modes for motor, sensors, and LEDs
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  pinMode(motorEnablePin, OUTPUT);
  pinMode(irSensorPin, INPUT_PULLUP);
  pinMode(irSensorEnablePin, OUTPUT);

  // LED Pin Modes
  pinMode(redLedPin, OUTPUT);
  pinMode(blueLedPin, OUTPUT);
  pinMode(greenLedPin, OUTPUT);

  // Initialize pins
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, LOW);
  digitalWrite(motorEnablePin, LOW);
  digitalWrite(irSensorEnablePin, LOW);
  
  // Initialize LEDs to OFF
  digitalWrite(redLedPin, LOW);
  digitalWrite(blueLedPin, LOW);
  digitalWrite(greenLedPin, LOW);

  // Attach IR sensor interrupt
  attachInterrupt(digitalPinToInterrupt(irSensorPin), irSensorISR, FALLING);

  // Initialize OLED display
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("SSD1306 allocation failed!");
    for (;;);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Initializing...");
  display.display();

  // Connect to WiFi
  WiFi.begin(ssid, password);
  display.println("Connecting to WiFi...");
  display.display();
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    digitalWrite(redLedPin, HIGH);  // Red LED on during WiFi connection
    delay(250);
    digitalWrite(redLedPin, LOW);
  }
  Serial.println("\nWiFi connected!");
  display.println("WiFi Connected!");
  display.display();
}

void loop() {
  unsigned long currentTime = millis();

  // Manage LED states
  manageLEDs();

  // Check WiFi status and process pending DB update if available
  if (WiFi.status() == WL_CONNECTED) {
    if (pendingPaymentUpdate) {
      processPendingPaymentUpdate();
    }
  } else {
    Serial.println("WiFi not connected. Cannot process pending updates.");
  }

  // Motor and Sensor Logic
  if (motorStarted) {
    // Check for overall motor timeout
    if (currentTime - motorStartTime >= motorTimeout) {
      Serial.println("Motor timeout reached. Initiating refund.");
      String currentPaymentId = getCurrentPaymentId();
      if (currentPaymentId != "") {
        stopMotor();
        startRefundProcess(currentPaymentId, "Motor timeout reached.");
      } else {
        Serial.println("No valid payment ID available for refund.");
      }
      irInterruptDetected = false;
    }

    // Stop motor when IR sensor is triggered
    if (irInterruptDetected) {
      Serial.println("IR sensor triggered while motor running. Stopping motor.");
      stopMotor();
      irInterruptDetected = false;
    }
  }

  // Fetch and display data from server if WiFi is connected
  if (WiFi.status() == WL_CONNECTED) {
    fetchCheckStatus();
    fetchAndDisplayData();
  } else {
    Serial.println("WiFi not connected!");
    display.clearDisplay();
    display.setTextSize(2);
    display.setCursor(0, 0);
    display.println("WiFi not connected!");
    display.display();
  }

  delay(100);  // Poll every 0.1 seconds
}

void manageLEDs() {
  unsigned long currentTime = millis();

  // Red LED for system offline/error
  if (WiFi.status() != WL_CONNECTED) {
    digitalWrite(redLedPin, HIGH);
  } else {
    digitalWrite(redLedPin, LOW);
  }

  // Blue LED for dispensing (blinking)
  static bool blueLedState = false;
  if (motorStarted) {
    if (currentTime - blueLedBlinkStartTime >= blueLedBlinkInterval) {
      blueLedState = !blueLedState;
      digitalWrite(blueLedPin, blueLedState);
      blueLedBlinkStartTime = currentTime;
    }
  } else {
    digitalWrite(blueLedPin, LOW);
  }

  // Green LED for IR sensor trigger
  if (irInterruptDetected) {
    if (greenLedTriggerTime == 0) {
      greenLedTriggerTime = currentTime;
      digitalWrite(greenLedPin, HIGH);
    }

    // Blink green LED after initial solid state
    if (currentTime - greenLedTriggerTime > 2000) {
      static bool greenLedState = true;
      static unsigned long lastGreenBlinkTime = 0;
      
      if (currentTime - lastGreenBlinkTime > 500) {
        greenLedState = !greenLedState;
        digitalWrite(greenLedPin, greenLedState);
        lastGreenBlinkTime = currentTime;
      }
    }

    // Turn off green LED after 6 seconds
    if (currentTime - greenLedTriggerTime > greenLedDuration) {
      digitalWrite(greenLedPin, LOW);
      greenLedTriggerTime = 0;
    }
  }
}

String getCurrentPaymentId() {
  HTTPClient http;
  String url = String(currentPaymentRoute) + "?authCode=" + authCode;
  http.begin(url);
  int httpResponseCode = http.GET();
  String paymentId = "";
  if (httpResponseCode == 200) {
    String response = http.getString();
    DynamicJsonDocument doc(256);
    DeserializationError error = deserializeJson(doc, response);
    if (!error) {
      paymentId = doc["currentPaymentId"].as<String>();
      Serial.println("Current Payment ID: " + paymentId);
    } else {
      Serial.print("JSON parse error in getCurrentPaymentId: ");
      Serial.println(error.c_str());
    }
  } else {
    Serial.print("Error fetching current payment id. HTTP code: ");
    Serial.println(httpResponseCode);
  }
  http.end();
  return paymentId;
}

void fetchCheckStatus() {
  HTTPClient http;
  String fullURL = String(checkURL) + "?authCode=" + authCode;
  http.begin(fullURL);
  int httpResponseCode = http.GET();
  if (httpResponseCode == 200) {
    String payload = http.getString();
    if (payload.indexOf("\"systemStatus\":\"active\"") > -1) {
      digitalWrite(redLedPin, LOW);
    } else {
      digitalWrite(redLedPin, HIGH);
    }
  } else {
    Serial.println("Error fetching /check status: " + String(httpResponseCode));
    digitalWrite(redLedPin, HIGH);
  }
  http.end();
}

void fetchAndDisplayData() {
  HTTPClient http;
  String fullURL = String(displayURL) + "?authCode=" + authCode;
  http.begin(fullURL);
  int httpResponseCode = http.GET();
  if (httpResponseCode == 200) {
    String payload = http.getString();

    // Parse JSON response using ArduinoJson
    DynamicJsonDocument doc(256);
    DeserializationError error = deserializeJson(doc, payload);
    if (error) {
      Serial.print("JSON parse error: ");
      Serial.println(error.c_str());
      return;
    }
    int serverPadCount = doc["padCount"];
    bool dispensing = doc["dispensing"];
    String paymentStatus = doc["paymentStatus"];
    String systemStatus = doc["systemStatus"];

    // Debug print
    Serial.println("Server state - Dispensing: " + String(dispensing ? "true" : "false") + ", Payment Status: " + paymentStatus + ", System Status: " + systemStatus);

    display.clearDisplay();

    if (dispensing) {
      // Enable IR sensor when dispensing is true
      digitalWrite(irSensorEnablePin, HIGH);
      
      if (irInterruptDetected) {
        display.setTextSize(2);
        display.setCursor(0, 20);
        display.println("Collecting");
        display.setCursor(0, 40);
        display.println("Pads...");
      } else {
        // Existing dispensing message
        display.setTextSize(2);
        display.setCursor(0, 20);
        display.println("cooking pads nice!");
      }
      
      // Show special message if dispensing
      display.setTextSize(2);
      display.setCursor(0, 20);
      display.println("cooking pads nice!");
    } else {
      // Disable IR sensor when not dispensing
      digitalWrite(irSensorEnablePin, LOW);
      
      // Alternating messages
      static unsigned long lastDisplayChange = 0;
      static bool showSpecialMessage = false;
      unsigned long currentTime = millis();
      const unsigned long messageDuration = 1300;  // special message duration
      const unsigned long statusDuration = 5000;   // status display duration

      if (currentTime - lastDisplayChange > (showSpecialMessage ? messageDuration : statusDuration)) {
        showSpecialMessage = !showSpecialMessage;
        lastDisplayChange = currentTime;
      }

      if (showSpecialMessage) {
        display.setTextSize(2);
        display.setCursor(0, 10);
        display.println("Happy");
        display.setCursor(0, 30);
        display.println("Women's");
        display.setCursor(0, 50);
        display.println("Day!");
      } else {
        display.setTextSize(3);
        display.setCursor(0, 0);
        display.println(serverPadCount);
        display.setTextSize(1);
        display.setCursor(40, 5);
        display.println("Pads left");
        display.setCursor(0, 40);
        display.print("Status: ");
        display.println(paymentStatus);
        display.setCursor(0, 50);
        display.print("System: ");
        display.println(systemStatus);
      }
    }

    display.display();

    // Motor control logic based on dispensing value from the server
    if (dispensing && !motorStarted) {
      Serial.println("Dispensing is true. Starting motor...");
      startMotor();
    } else if (!dispensing && motorStarted) {
      Serial.println("Dispensing is false. Stopping motor...");
      stopMotor();
    }
  } else {
    Serial.println("Error fetching /display: " + String(httpResponseCode));
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("Error fetching data!");
    display.display();
  }
  http.end();
}

void processPendingPaymentUpdate() {
  File file = SPIFFS.open("/pendingPaymentUpdate.json", FILE_READ);
  if (!file) {
    Serial.println("No pending payment update file found.");
    pendingPaymentUpdate = false;
    return;
  }
  String jsonPayload = file.readString();
  file.close();

  HTTPClient http;
  String url = String(updatePaymentStatusURL) + "?authCode=" + authCode;
  http.begin(url);
  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST(jsonPayload);
  if (httpResponseCode == 200) {
    Serial.println("Pending payment status updated successfully.");
    SPIFFS.remove("/pendingPaymentUpdate.json");
    pendingPaymentUpdate = false;
  } else {
    Serial.print("Failed to update pending payment status. HTTP code: ");
    Serial.println(httpResponseCode);
  }
  http.end();
}

void updatePaymentStatus() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi not connected. Saving payment status update locally.");
    // Save the update payload to SPIFFS for later processing
    String payload = "{\"paymentStatus\":\"ready\", \"authCode\":\"" + String(authCode) + "\"}";
    File file = SPIFFS.open("/pendingPaymentUpdate.json", FILE_WRITE);
    if (file) {
      file.print(payload);
      file.close();
      pendingPaymentUpdate = true;
    } else {
      Serial.println("Error writing pending update to storage.");
    }
    return;
  }

  HTTPClient http;
  String url = String(updatePaymentStatusURL) + "?authCode=" + authCode;
  http.begin(url);
  http.addHeader("Content-Type", "application/json");

  String jsonPayload = "{\"paymentStatus\":\"ready\", \"authCode\":\"" + String(authCode) + "\"}";
  int httpResponseCode = http.POST(jsonPayload);

  if (httpResponseCode == 200) {
    Serial.println("Payment status updated to ready successfully.");
  } else {
    Serial.print("Failed to update payment status. HTTP response code: ");
    Serial.println(httpResponseCode);
    // Save the update payload for retry later
    File file = SPIFFS.open("/pendingPaymentUpdate.json", FILE_WRITE);
    if (file) {
      file.print(jsonPayload);
      file.close();
      pendingPaymentUpdate = true;
    } else {
      Serial.println("Error writing pending update to storage.");
    }
  }
  http.end();
}

void startRefundProcess(const String& paymentId, const String& reason) {
  Serial.println("Starting refund process...");

  HTTPClient http;
  http.begin(refundURL);
  http.addHeader("Content-Type", "application/json");

  String postData = "{\"paymentId\":\"" + paymentId + "\", \"reason\":\"" + reason + "\"}";
  int httpResponseCode = http.POST(postData);

  if (httpResponseCode == 200) {
    Serial.println("Refund process initiated successfully.");
    String response = http.getString();
    Serial.println("Server response: " + response);

    updatePaymentStatus();  // This sets the payment status to "ready"
    setDispensingStatus(false);  // Set dispensing to false after refund starts
  } else {
    Serial.println("Refund request failed!");
    String response = http.getString();
    Serial.println("Server response: " + response);
  }
  http.end();
}

void setDispensingStatus(bool status) {
  HTTPClient http;
  String fullURL = String(displayURL) + "?authCode=" + authCode;
  http.begin(fullURL);
  http.addHeader("Content-Type", "application/json");

  String postData = "{\"dispensing\":" + String(status ? "true" : "false") + "}";
  int httpResponseCode = http.POST(postData);

  if (httpResponseCode == 200) {
    Serial.println("Dispensing status updated successfully.");
  } else {
    Serial.println("Failed to update dispensing status. HTTP response code: " + String(httpResponseCode));
    String response = http.getString();
    Serial.println("Server response: " + response);
  }
  http.end();
}

void sendSystemError() {
  HTTPClient http;
  String fullURL = String(serverIP) + "/system-error";
  http.begin(fullURL);

  String postData = "{\"reason\":\"IR interrupt not detected\"}";
  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST(postData);
  if (httpResponseCode == 200) {
    Serial.println("System error reported to server.");
  } else {
    Serial.println("Failed to report system error to server.");
  }
  http.end();
}