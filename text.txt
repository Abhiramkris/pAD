#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <HTTPClient.h>

// WiFi Credentials
const char* ssid = "asdf";
const char* password = "";

// Server URL and Auth Code
const char* checkURL = "https://pad-ew3v.onrender.com/check";
const char* displayURL = "https://pad-ew3v.onrender.com/display";
const char* refundURL = "https://pad-ew3v.onrender.com/refund";
const char* updatePaymentStatusURL = "https://pad-ew3v.onrender.com/update-payment-status";
const char* authCode = "your_secret_auth_code";

// Server IP
const char* serverIP = "https://pad-ew3v.onrender.com";  // Replace with your actual server URL

// LED Pin
const int ledPin = 2;
const int motorPin = 12;
const int irSensorPin = 14;
unsigned long motorStartTime = 0;
const unsigned long timeoutDuration = 10000;
bool motorStarted = false;
bool irInterruptDetected = false;

// OLED Display Configuration
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Function Declarations
void fetchCheckStatus();
void fetchAndDisplayData();
void sendSystemError();
void startMotor();
void updatePaymentStatus();
void startRefundProcess();

// Sensor Interrupt
void IRAM_ATTR sensorInterrupt() {
  irInterruptDetected = true;  // Set the flag when the IR sensor is triggered
  Serial.println("IR sensor triggered! Pad dispensed.");
}

void startMotor() {
  motorStarted = true;
  motorStartTime = millis();  // Start the motor and record the time
  digitalWrite(motorPin, HIGH);
  Serial.println("Motor started.");
  delay(5000);  // Run the motor for 5 seconds (adjust as needed)
  digitalWrite(motorPin, LOW);
  motorStarted = false;
  Serial.println("Motor stopped.");
  updatePaymentStatus();  // Update payment status when the motor stops
}

void setup() {
  Serial.begin(115200);
  pinMode(ledPin, OUTPUT);
  pinMode(motorPin, OUTPUT);
  pinMode(irSensorPin, INPUT_PULLUP);

  attachInterrupt(digitalPinToInterrupt(irSensorPin), sensorInterrupt, FALLING);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("SSD1306 allocation failed!");
    for (;;);
  }

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Initializing...");
  display.display();

  WiFi.begin(ssid, password);
  display.println("Connecting to WiFi...");
  display.display();
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected!");
  display.println("WiFi Connected!");
  display.display();
}

void loop() {
  if (WiFi.status() == WL_CONNECTED) {
    fetchCheckStatus();
    fetchAndDisplayData();
  } else {
    Serial.println("WiFi not connected!");
  }

  delay(5000);  // Poll every 5 seconds

  if (motorStarted) {
    if (millis() - motorStartTime >= timeoutDuration) {
      if (!irInterruptDetected) {
        Serial.println("No IR interrupt detected. Starting refund process.");
        startRefundProcess();  // Start refund if IR interrupt is not detected within timeout
      }
      motorStarted = false;
      updatePaymentStatus();  // Update payment status when motor stops or timeout occurs
    }
  }
}

void fetchCheckStatus() {
  HTTPClient http;
  String fullURL = String(checkURL) + "?authCode=" + authCode;
  http.begin(fullURL);

  int httpResponseCode = http.GET();
  if (httpResponseCode == 200) {
    String payload = http.getString();
    Serial.println("System Status from /check: " + payload);
    if (payload.indexOf("\"systemStatus\":\"active\"") > -1) {
      digitalWrite(ledPin, HIGH);
    } else {
      digitalWrite(ledPin, LOW);
    }
  } else {
    Serial.println("Error fetching /check status: " + String(httpResponseCode));
    digitalWrite(ledPin, LOW);
  }

  http.end();
}

void fetchAndDisplayData() {
  HTTPClient http;
  String fullURL = String(displayURL) + "?authCode=" + authCode;
  http.begin(fullURL);

  int httpResponseCode = http.GET();
  if (httpResponseCode == 200) {
    String payload = http.getString();
    Serial.println("Display Data from /display: " + payload);
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println(payload);
    display.display();

    // Check if payment status is success
    if (payload.indexOf("\"paymentStatus\":\"success\"") > -1) {
      Serial.println("Payment successful, starting motor...");
      startMotor();  // Start the motor when payment is successful
    }
  } else {
    Serial.println("Error fetching /display: " + String(httpResponseCode));
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println("Error fetching data!");
    display.display();
  }

  http.end();
}

void initializeRefund() {
  Serial.println("Motor stopped after timeout. Initializing refund process...");
  
  // Send a refund request or update payment status
  HTTPClient http;
  String fullURL = String(serverIP) + "/update-payment-status";
  http.begin(fullURL);

  String postData = "{\"paymentStatus\":\"ready\", \"authCode\":\"" + String(authCode) + "\"}";
  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST(postData);
  if (httpResponseCode == 200) {
    Serial.println("Payment status updated to 'ready' after motor timeout.");
  } else {
    Serial.println("Failed to update payment status to 'ready'.");
  }

  http.end();
}

void startRefundProcess() {
  Serial.println("Payment timeout! Starting refund process...");

  // Send refund request
  HTTPClient http;
  http.begin(refundURL);
  http.addHeader("Content-Type", "application/json");

  String postData = "{\"authCode\":\"" + String(authCode) + "\"}";
  int httpResponseCode = http.POST(postData);

  if (httpResponseCode == 200) {
    Serial.println("Refund process initiated.");
    // Set payment status to "ready"
    updatePaymentStatus();
  } else {
    Serial.println("Refund request failed!");
  }

  http.end();
}

void updatePaymentStatus() {
  HTTPClient http;
  String url = "https://pad-ew3v.onrender.com/update-payment-status";  // Replace with your server's IP or domain
  http.begin(url);
  http.addHeader("Content-Type", "application/json");

  // Make sure the authCode matches the one set on the server
  String jsonPayload = "{\"paymentStatus\":\"ready\", \"authCode\":\"your_secret_auth_code\"}";

  // Send the POST request
  int httpResponseCode = http.POST(jsonPayload);

  if (httpResponseCode == 200) {
    Serial.println("Payment status updated to ready successfully.");
  } else {
    Serial.println("Failed to update payment status. HTTP response code: " + String(httpResponseCode));
    String response = http.getString();
    Serial.println("Server response: " + response);
  }

  http.end();
}


void sendSystemError() {
  HTTPClient http;
  String fullURL = String(serverIP) + "/system-error";
  http.begin(fullURL);

  String postData = "{\"reason\":\"IR interrupt not detected\"}";
  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST(postData);
  if (httpResponseCode == 200) {
    Serial.println("System error reported to server.");
  } else {
    Serial.println("Failed to report system error to server.");
  }

  http.end();
}
