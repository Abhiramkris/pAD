#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClientSecure.h>

// WiFi Credentials
const char* ssid = "asdff";
const char* password = "";

// Server URLs - store in flash memory to save RAM
const char PROGMEM checkURL[] = "https://pad-ew3v.onrender.com/check";
const char PROGMEM authCode[] = "your_secret_auth_code";

// ESP8266 Pin Configuration (NodeMCU)
#define MOTOR_PIN1 D1
#define MOTOR_PIN2 D2
#define MOTOR_ENABLE_PIN D3
#define IR_SENSOR_PIN D5
#define LED_PIN D4

// Timing variables
volatile unsigned long lastIrTriggerTime = 0;
unsigned long lastHttpRequestTime = 0;
#define HTTP_REQUEST_INTERVAL 5000
#define HTTP_TIMEOUT 15000  // Increased timeout for HTTP requests
#define WIFI_RETRY_INTERVAL 10000

// System state
volatile bool irInterruptDetected = false;
unsigned long motorStartTime = 0;
#define MOTOR_TIMEOUT 50000
bool motorStarted = false;
int httpRetryCount = 0;
#define MAX_HTTP_RETRIES 5  // Increased number of retries

// Helper function to read from flash
String getFlashString(const char* flashStr) {
  return String((const __FlashStringHelper*)flashStr);
}

// ISR for IR sensor
void ICACHE_RAM_ATTR irSensorISR() {
  if (millis() - lastIrTriggerTime > 100) {
    irInterruptDetected = true;
    lastIrTriggerTime = millis();
  }
}

void setupWiFi() {
  Serial.println(F("\nSetting up WiFi..."));
  
  // Aggressive WiFi connection settings
  WiFi.persistent(false);  // Don't save WiFi settings to flash
  WiFi.mode(WIFI_STA);     // Station mode only
  WiFi.setSleepMode(WIFI_NONE_SLEEP);  // Disable sleep to improve stability
  
  // Disconnect first to ensure clean connection
  WiFi.disconnect();
  delay(100);
  
  WiFi.begin(ssid, password);
  
  Serial.print(F("Connecting to WiFi"));
  int wifiRetry = 0;
  while (WiFi.status() != WL_CONNECTED && wifiRetry < 30) {  // Longer retry period
    delay(500);
    Serial.print(F("."));
    wifiRetry++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println(F("\nWiFi connected!"));
    Serial.print(F("IP address: "));
    Serial.println(WiFi.localIP());
    digitalWrite(LED_PIN, HIGH);  // LED on when connected
  } else {
    Serial.println(F("\nWiFi connection failed!"));
    digitalWrite(LED_PIN, LOW);
  }
}

void ensureWiFiConnection() {
  static unsigned long lastReconnectAttempt = 0;
  
  if (WiFi.status() != WL_CONNECTED) {
    digitalWrite(LED_PIN, LOW);  // LED off when disconnected
    
    if (millis() - lastReconnectAttempt > WIFI_RETRY_INTERVAL) {
      Serial.println(F("WiFi disconnected. Reconnecting..."));
      setupWiFi();
      lastReconnectAttempt = millis();
    }
  } else {
    digitalWrite(LED_PIN, HIGH);  // LED on when connected
  }
}

void startMotor() {
  if (!motorStarted) {
    Serial.println(F("Starting motor"));
    motorStarted = true;
    motorStartTime = millis();
    irInterruptDetected = false;
    
    digitalWrite(MOTOR_PIN1, LOW);
    digitalWrite(MOTOR_PIN2, HIGH);
    analogWrite(MOTOR_ENABLE_PIN, 1023);
    delay(500);
    digitalWrite(MOTOR_PIN1, HIGH);
    digitalWrite(MOTOR_PIN2, LOW);
  }
}

void stopMotor() {
  Serial.println(F("Stopping motor"));
  analogWrite(MOTOR_ENABLE_PIN, 0);
  digitalWrite(MOTOR_PIN1, LOW);
  digitalWrite(MOTOR_PIN2, LOW);
  motorStarted = false;
}

void checkPaymentStatus() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println(F("WiFi not connected, cannot check payment"));
    return;
  }
  
  Serial.println(F("Checking payment status..."));
  
  WiFiClientSecure client;
  client.setInsecure();  // Accept any certificate
  client.setTimeout(HTTP_TIMEOUT);
  
  // First test raw connection to server
  Serial.println(F("Testing direct connection to server..."));
  if (!client.connect("pad-ew3v.onrender.com", 443)) {
    Serial.println(F("Direct connection failed!"));
    return;
  }
  Serial.println(F("Direct connection OK, proceeding with HTTP request"));
  client.stop();  // Close test connection
  
  // Now try the HTTP request
  HTTPClient http;
  String url = getFlashString(checkURL) + "?authCode=" + getFlashString(authCode);
  
  http.begin(client, url);
  http.setTimeout(HTTP_TIMEOUT);
  http.addHeader("Connection", "close");
  
  Serial.print(F("Sending HTTP request to: "));
  Serial.println(url);
  
  int httpCode = http.GET();
  Serial.print(F("HTTP response code: "));
  Serial.println(httpCode);
  
  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    Serial.print(F("Response: "));
    Serial.println(payload);
    
    // Check if payment is successful and we should dispense
    if (payload.indexOf("\"dispensing\":1") != -1) {
      Serial.println(F("Payment successful! Starting motor"));
      startMotor();
    } else if (motorStarted) {
      Serial.println(F("Dispensing complete or payment not active. Stopping motor"));
      stopMotor();
    }
    
    httpRetryCount = 0;  // Reset retry counter on success
  } else {
    Serial.printf_P(PSTR("Check failed, code: %d, error: %s\n"), 
                    httpCode, http.errorToString(httpCode).c_str());
    
    httpRetryCount++;
    if (httpRetryCount > MAX_HTTP_RETRIES) {
      Serial.println(F("Maximum retries reached, will try again later"));
      httpRetryCount = 0;  // Reset to prevent counter overflow
    }
  }
  
  http.end();
}

void handleMotorOperation() {
  // Check for motor timeout
  if (motorStarted && millis() - motorStartTime > MOTOR_TIMEOUT) {
    Serial.println(F("Motor timeout reached! Stopping motor."));
    stopMotor();
  }
  
  // Check for IR sensor trigger
  if (motorStarted && irInterruptDetected) {
    Serial.println(F("IR sensor triggered! Stopping motor."));
    irInterruptDetected = false;
    stopMotor();
  }
}

void setup() {
  Serial.begin(115200);
  delay(100);
  Serial.println(F("\n\nStarting simplified device..."));
  
  // Initialize pins
  pinMode(MOTOR_PIN1, OUTPUT);
  pinMode(MOTOR_PIN2, OUTPUT);
  pinMode(MOTOR_ENABLE_PIN, OUTPUT);
  pinMode(IR_SENSOR_PIN, INPUT_PULLUP);
  pinMode(LED_PIN, OUTPUT);
  
  digitalWrite(MOTOR_PIN1, LOW);
  digitalWrite(MOTOR_PIN2, LOW);
  analogWrite(MOTOR_ENABLE_PIN, 0);
  digitalWrite(LED_PIN, LOW);
  
  // Set up WiFi
  setupWiFi();
  
  // Attach interrupt for IR sensor
  attachInterrupt(digitalPinToInterrupt(IR_SENSOR_PIN), irSensorISR, FALLING);
}

void loop() {
  // Ensure WiFi connection
  ensureWiFiConnection();
  
  // Handle motor operation
  handleMotorOperation();
  
  // Check for payment status at intervals
  if (millis() - lastHttpRequestTime > HTTP_REQUEST_INTERVAL) {
    if (WiFi.status() == WL_CONNECTED) {
      checkPaymentStatus();
    }
    lastHttpRequestTime = millis();
  }
  
  yield();  // Allow the ESP8266 to handle WiFi and system tasks
}